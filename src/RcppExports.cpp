// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// euclnormC
double euclnormC(arma::colvec x);
RcppExport SEXP _forecastcalibration_euclnormC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(euclnormC(x));
    return rcpp_result_gen;
END_RCPP
}
// copulapitC
List copulapitC(arma::colvec y, arma::mat dat);
RcppExport SEXP _forecastcalibration_copulapitC(SEXP ySEXP, SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(copulapitC(y, dat));
    return rcpp_result_gen;
END_RCPP
}
// esC_sample
List esC_sample(arma::colvec y, arma::mat dat);
RcppExport SEXP _forecastcalibration_esC_sample(SEXP ySEXP, SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(esC_sample(y, dat));
    return rcpp_result_gen;
END_RCPP
}
// esC_split
List esC_split(arma::colvec y, arma::mat dat1, arma::mat dat2);
RcppExport SEXP _forecastcalibration_esC_split(SEXP ySEXP, SEXP dat1SEXP, SEXP dat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat1(dat1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat2(dat2SEXP);
    rcpp_result_gen = Rcpp::wrap(esC_split(y, dat1, dat2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_forecastcalibration_euclnormC", (DL_FUNC) &_forecastcalibration_euclnormC, 1},
    {"_forecastcalibration_copulapitC", (DL_FUNC) &_forecastcalibration_copulapitC, 2},
    {"_forecastcalibration_esC_sample", (DL_FUNC) &_forecastcalibration_esC_sample, 2},
    {"_forecastcalibration_esC_split", (DL_FUNC) &_forecastcalibration_esC_split, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_forecastcalibration(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
